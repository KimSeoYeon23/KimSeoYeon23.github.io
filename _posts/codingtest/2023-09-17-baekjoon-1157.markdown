---
layout: post
title:  "백준 알고리즘 1157번"
date:   2023-09-17 23:45:00 +0900
categories:
  - Dev
  - codingtest
tag: codingtest
comments: true
---

* this unordered seed list will be replaced by the toc
{:toc}

## 백준 알고리즘 1157번 단어 공부


### 문제

알파벳 대소문자로 된 단어가 주어지면, 이 단어에서 가장 많이 사용된 알파벳이 무엇인지 알아내는 프로그램을 작성하시오. 단, 대문자와 소문자를 구분하지 않는다.

### 입력

첫째 줄에 알파벳 대소문자로 이루어진 단어가 주어진다. 주어지는 단어의 길이는 1,000,000을 넘지 않는다.

### 출력

첫째 줄에 이 단어에서 가장 많이 사용된 알파벳을 대문자로 출력한다. 단, 가장 많이 사용된 알파벳이 여러 개 존재하는 경우에는 ?를 출력한다.

### 예제

| 입력 | 출력 |
| --- | --- |
| `level` | `1` |
| `beakjoon` | `0` |

### 풀이

```py
words = input().upper()
unique_words = list(set(words))

cnt_list = []

for x in unique_words:
  cnt = words.count(x)
  cnt_list.append(cnt)

if cnt_list.count(max(cnt_list)) > 1 :
  print('?')
else:
  max_index = cnt_list.index(max(cnt_list))
  print(unique_words[max_index])
```

1. 처음에 입력받는 문자는 대소문자를 구분하지 않기 때문에 `upper()` 함수를 이용하여 문자열을 모두 대문자로 변환하여 `words`라는 변수에 선언한다.
2. 입력받은 문자열 중 중복되는 요소는 `set()` 함수를 사용하여 제거하고, 중복되지 않는 요소만 남긴 리스트는 `unique_words`라는 변수에 선언한다.
3. 입력받은 문자열ㅇ에 같은 알파벳이 몇 개 있는지 숫자를 카운트해서 `cnt_list`에 추가한다.
4. 숫자 리스트에서 알파벳이 사용된 개수 중 가장 큰 수를 찾고서 해당 숫자가 `1`보다 크면 물음표를 출력한다.
   1. 최댓값이 하나라면 숫자 리스트에서 가장 큰 수의 위치를 `index()` 함수로 찾고서 `unique_words` 리스트에서 같은 인덱스에 위치한 문자열을 출력한다.