---
layout: post
title: "리스트 자료형(list)"
date: 2025-08-05 10:28:00 +0900
categories: 
  - Dev
  - python
tag: python
comments: true
---

* this unordered seed list will be replaced by the toc
{:toc}

# 리스트는 어떻게 만들고 사용할까?

리스트를 사용하면 1, 3, 5, 7, 9의 숫자 모음을 다음과 같이 간단하게 표현할 수 있다.

```Python
>>> odd = [1, 3, 5, 7, 9]
```

리스트를 만들 때는 위에서 보는 것과 같이 대괄호([])로 감싸 주고 각 요솟값은 쉼표(`,`)로 구분해 준다.

```Python
리스트명 = [요소1, 요소2, 요소3, ...]
```

여러 가지 리스트의 생김새는 다음과 같다.

```Python
>>> a = []
>>> b = [1, 2, 3]
>>> c = ['Life', 'is', 'too', 'short']
>>> d = [1, 2, 'Life', 'is']
>>> e = [1, 2, ['Life', 'is']]
```

> 비어 있는 리스트는 `a = list()` 로 생성할 수 있다.

리스트는 `a` 처럼 아무것도 포함하지 않아 비어 있는 리스트([])일 수도 있고, `b`처럼 숫자를 요솟값으로 가질 수도 있으며, `c`처럼 문자열을 요솟값으로 가질 수도 있다. 또한 `d`처럼 숫자와 문자열을 함께 요솟값으로 가질 수도 있고, `e`처럼 리스트 자체를 요솟값으로 가질 수도 있다. 즉, 리스트 안에는 어떠한 자료형도 포함할 수 있다.

![[99.Atteachment/image 13.png|image 13.png]]

  

# 리스트 인덱싱과 슬라이싱

리스트도 문자열처럼 인뎅싱과 슬라이싱이 가능하다.

  

## 리스트의 인덱싱

리스트의 역시 문자열처럼 인덱싱을 적용할 수 있다. 먼저 `a` 변수에 `[1, 2, 3]` 값을 설정한다.

```Python
>>> a = [1, 2, 3]
>>> a
[1, 2, 3]
```

`a[0]`은 리스트 `a`의 첫 번째 요솟값을 말한다.

```Python
>>> a[0]
1
```

다음 예는 리스트의 첫 번째 요소인 `a[0]`과 세 번째 요소인 `a[2]`의 값을 더한 것이다.

```Python
>>> a[0] + a[2]
4
```

이것은 1 + 3으로 해석되어 값 4를 출력한다.

`a[-1]`은 문자열에서와 마찬가지로 리스트 `a`의 마지막 요솟값을 말한다.

```Python
>>> a[-1]
3
```

이번에는 다음 예처럼 리스트 `a` 를 숫자 1, 2, 3과 또 다른 리스트인 `['a', 'b', 'c']`를 포함하도록 만들어 본다.

```Python
>>> a = [1, 2, 3, ['a', 'b', 'c']]
```

그리고 다음 예를 따라 해 본다.

```Python
>>> a[0]
1
>>> a[-1]
['a', 'b', 'c']
>>> a[3]
['a', 'b', 'c']
```

예상한 대로 `a[-1]` 은 마지막 요솟값 `['a', 'b', 'c']`를 나타낸다. `a[3]`은 리스트 `a`의 네 번째 요소를 나타내기 때문에 마지막 요소를 나타내는 `a[-1]` 과 동일한 결괏값을 보여 준다.

그렇다면 리스트 `a`에 포함된 `['a', 'b', 'c']` 리스트에서 `a` 값을 인덱싱을 사용해 끄집어 낼 수 있는 방법은 없을까? 다음 예를 살펴본다.

```Python
>>> a[-1][0]
'a'
```

위와 같이 하면 `a`를 끄집어 낼 수 있다. `a[-1]`이 `['a', 'b', 'c']` 리스트라는 것은 이미 설명했다. 바로 이 리스트에서 첫 번째 요소를 불러오기 위해 `[0]`을 붙여 준 것이다.

다음 예도 마찬가지 경우이므로 어렵지 않게 이해할 수 있을 것이다.

```Python
>>> a[-1][1]
'b'
>>> a[-1][2]
'c'
```

  

  

## 리스트의 슬라이싱

문자열과 마찬가지로 리스트에서도 슬라이싱 기법을 적용할 수 있다. 슬라이싱은 ‘잘라 낸다’라는 뜻이라고 했다.

```Python
>>> a = [1, 2, 3, 4, 5]
>>> a[0:2]
[1, 2]
```

앞의 예를 문자열에서 슬라이싱 했던 예와 비교해 본다.

```Python
>>> a = '12345'
>>> a[0:2]
'12'
```

2가지가 완전히 동일하게 사용되었다는 것을 눈치챘을 것이다. 문자열에서 했던 것과 사용법이 완전히 동일하다.

```Python
>>> a = [1, 2, 3, 4, 5]
>>> b = a[:2]
>>> c = a[2:]
>>> b
[1, 2]
>>> c
[3, 4, 5]
```

`b` 변수는 리스트 `a`의 첫 번쨰 요소부터 두 번째 요소인 `a[1]`까지 나타내는 리스트이다. 물론 `a[2]` 값인 3은 포함되지 않는다. `c`라는 변수는 리스트 `a`의 세 번쨰 요소부터 끝까지 나타내는 리스트이다.

  

# 리스트 연산하기

리스트 역시 `+`를 사용해서 더할 수 있고, `*`를 사용해서 반복할 수 있다.

  

## 리스트 더하기(`+`)

```Python
>>> a = [1, 2, 3]
>>> b = [4, 5, 6]
>>> a + b
[1, 2, 3, 4, 5, 6]
```

리스트 사이에서 `+`는 2개의 리스트를 합치는 기능을 한다. 문자열에서 `"abc" + "def" = "abcdef"`가 되는 것과 같은 이치이다.

  

## 리스트 반복하기(`*` )

```Python
>>> a = [1, 2, 3]
>>> a * 3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
```

위에서 볼 수 있듯이 `[1, 2, 3]` 리스트가 세 번 반복되어 새로운 리스트를 만들어 낸다. 문자열에서 `"abc" * 3 = "abcabcabc"`가 되는 것과 같은 이치이다.

  

## 리스트 길이 구하기

리스트 길이를 구하기 위해서는 다음처럼 `len` 함수를 사용해야 한다.

```Python
>>> a = [1, 2, 3]
>>> len(a)
3
```

`len`은 문자열, 리스트 외에 튜플과 딕셔너리에도 사용할 수 있는 함수이다.

  

# 리스트의 수정과 삭제

리스트는 값을 수정하거나 삭제할 수 있다.

  

## 리스트의 값 수정하기

```Python
>>> a = [1, 2, 3]
>>> a[2] = 4
>>> a
[1, 2, 4]
```

`a[2]`의 요솟값 `3`이 `4`로 바뀌었다.

  

## `del` 함수를 사용해 리스트 요소 삭제하기

```Python
>>> a = [1, 2, 3]
>>> del a[1]
>>> a
[1, 3]
```

`del a[x]`는 `x`번째 요솟값을 삭제한다. 위에서는 `a` 리스트에서 `a[1]`을 삭제했다. `del` 함수는 파이썬이 자체적으로 가지고 있는 삭제 함수이며 다음과 같이 사용한다.

```Python
del 객체
```

> 객체란 파이썬에서 사용되는 모든 자료형을 말한다.

다음처럼 슬라이싱 기법을 사용하여 리스트의 요소 여러 개를 한꺼번에 삭제할 수도 있다.

```Python
>>> a = [1, 2, 3, 4, 5]
>>> del a[2:]
>>> a
[1, 2]
```

`a[2:]`에 해당하는 리스트의 요소들이 삭제되었다.

  

# 리스트 관련 함수

문자열과 마찬가지로 리스트 변수 이름 뒤에 `.`을 붙여 여러 가지 리스트 관련 함수를 사용할 수 있다.

  

## 리스트에 요소 추가하기 - append

`append`의 사전적 의미는 ‘덧붙이다. 첨부하다’이다. 아래 `append(x)`는 리스트의 맨 마지막에 `x` 를 추가하는 함수이다.

```Python
>>> a = [1, 2, 3]
>>> a.append(4)
>>> a
[1, 2, 3, 4]
```

리스트 안에는 어떤 자료형도 추가할 수 있다.

```Python
>>> a.append([5, 6])
>>> a
[1, 2, 3, 4, [5, 6]]
```

  

## 리스트 정렬 - sort

`sort` 함수는 리스트의 요소를 순서대로 정렬해 준다.

```Python
>>> a = [1, 4, 3, 2]
>>> a.sort()
>>> a
[1, 2, 3, 4]
```

문자 역시 알파벳 순서로 정렬할 수 있다.

```Python
>>> a = ['a', 'c', 'b']
>>> a.sort()
>>> a
['a', 'b', 'c']
```

  

## 리스트 뒤집기 - reverse

`reverse` 함수는 리스트를 역순으로 뒤집어 준다. 이때 리스트 요소들을 순서대로 정렬한 다음 다시 역순으로 정렬하는 것이 아니라 현재의 리스트를 그대로 거꾸로 뒤집는다.

```Python
>>> a = ['a', 'c', 'b']
>>> a.reverse()
>>> a
['b', 'c', 'a']
```

  

## 인덱스 반환 - index

`index(x)` 함수는 리스트에 `x` 값이 있으면 `x`의 인덱스 값(위치값)을 리턴한다.

```Python
>>> a = [1, 2, 3]
>>> a.index(3)
2
>>> a.index(1)
0
```

위 예에서 리스트 `a` 에 있는 숫자 `3`의 위치는 `a[2]` 이므로 `2`, 숫자 `1`의 위치는 `a[0]`이므로 `0`을 리턴한다.

다음 예에서 값 `0`은 `a` 리스트에 존재하지 않기 때문에 오류가 발생한다.

```Python
>>> a.index(0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 0 is not in list
```

  

## 리스트에 요소 삽입 - insert

`insert(a, b)`는 리스트의 `a`번째 위치에 `b`를 삽입하는 함수이다.

```Python
>>> a = [1, 2, 3]
>>> a.insert(0, 4)
>>> a
[4, 1, 2, 3]
```

위 예는 0번째 자리, 즉 첫 번쨰 요소인 `a[0]` 위치에 값 `4`를 삽입하라는 뜻이다.

```Python
>>> a.insert(3, 5)
>>> a
[4, 1, 2, 5, 3]
```

위 예는 리스트 `a`의 `a[3]`, 즉 네 번째 요소 위치에 값 `5`를 삽입하라는 뜻이다.

  

## 리스트 요소 제거 - remove

`remove(x)`는 리스트에서 첫 번째로 나오는 `x`를 삭제하는 함수이다.

```Python
>>> a = [1, 2, 3, 1, 2, 3]
>>> a.remove(3)
>>> a
[1, 2, 1, 2, 3]
```

`a`가 `3`이라는 값을 2개 가지고 있을 경우, 첫 번째 3만 제거되는 것을 알 수 있다.

```Python
>>> a.remove(3)
>>> a
[1, 2, 1, 2]
```

`remove(3)`을 한 번 더 실행하면 다시 3이 삭제된다.

  

## 리스트 요소 끄집어 내기 - pop

`pop()` 은 리스트의 맨 마지막 요소를 리턴하고 그 요소는 삭제한다.

```Python
>>> a = [1, 2, 3]
>>> a.pop()
3
>>> a
[1, 2]
```

`a` 리스트를 다시 보면 `[1, 2, 3]` 에서 `3`을 끄집어 내고 최종적으로 `[1, 2]`만 남는 것을 확인할 수 있다.

`pop(x)`는 리스트의 `x`번째 요소를 리턴하고 그 요소는 삭제한다.

```Python
>>> a = [1, 2, 3]
>>> a.pop(1)
2
>>> a
[1, 3]
```

`a.pop(1)`은 `a[1]`의 값을 끄집어 내어 리턴한다. 다시 `a`를 출력해 보면 끄집어 낸 값이 삭제된 것을 확인할 수 있다.

  

## 리스트에 포함된 요소 x의 개수 세기 - count

`count(x)`는 리스트 안에 `x` 가 몇 개 있는지 조사하여 그 개수를 리턴하는 함수이다.

```Python
>>> a = [1, 2, 3, 1]
>>> a.count(1)
2
```

`1`이라는 값이 리스트 `a`에 2개 들어 있으므로 `2`를 리턴한다.

  

## 리스트 확장 - extend

`extend(x)`에서 `x`에는 리스트만 올 수 있으며 원래의 `a` 리스트에 `x` 리스트를 더하게 된다.

```Python
>>> a = [1, 2, 3]
>>> a.extend([4, 5])
>>> a
[1, 2, 3, 4, 5]
>>> b = [6, 7]
>>> a.extend(b)
>>> a
[1, 2, 3, 4, 5, 6, 7]
```

`a.extend([4, 5])`는 `a += [4, 5)`와 동일하다.

  

> 출처: [https://wikidocs.net/14](https://wikidocs.net/14)