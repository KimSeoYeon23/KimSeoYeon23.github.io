---
layout: post
title: "변수"
date: 2025-08-12 11:25:00 +0900
categories: 
  - Dev
  - python
tag: python
comments: true
---

* this unordered seed list will be replaced by the toc
{:toc}


## 변수는 어떻게 만들까?

다음 예와 같은 a, b, c를 '변수'라고 한다.
```python
>>> a = 1
>>> b = "python"
>>> c = [1,2,3]
```

변수를 만들 때는 위 예처럼 =(assignment) 기호를 사용한다.

```text
변수_이름 = 변수에_저장할_값
```

다른 프로그래밍 언어인 C나 JAVA에서는 변수를 만들 때 자료형의 타입을 직접 지정해야 한다. 하지만 파이썬은 저장된 값을 스스로 판단하여 자료형의 타입을 지정하기 때문에 더 편리하다.

## 변수란?

파이썬에서 사용하는 변수는 객체를 가리키는 것이라고도 말할 수 있다. 객체란 우리가 지금까지 보아온 자료형의 데이터(값)와 같은 것을 의미하는 말이다.

```python
a = [1, 2, 3]
```

만약 위 코드처럼 `a = [1, 2, 3]`이라고 하면 [1, 2, 3] 값을 가지는 리스트 데이터(객체)가 자동으로 메모리에 생성되고 변수 a는 [1, 2, 3] 리스트가 저장된 메모리의 주소를 가리키게 된다.

> 메모리란 컴퓨터가 프로그램에서 사용하는 데이터를 기억하는 공간을 말한다.

a변수가 가리키는 메모리의 주소는 다음과 같이 확인할 수 있다.

```python
>>> a = [1, 2, 3]
>>> id(a)
4479381696
```

id는 변수가 가리키고 있는 객체의 주소 값을 리턴하는 파이썬의 내장 함수이다. 즉, 여기에서 필자가 만든 변수 a가 가리키는 [1, 2, 3] 리스트의 주소 값은 4479381696이라는 것을 알 수 있다.

![](https://i.imgur.com/cNzbcxy.png)


## 리스트를 복사하고자 할 때

이번에는 리스트 자료형에서 가장 혼동하기 쉬운 '복사'에 대해 설명한다.

```python
>>> a = [1, 2, 3]
>>> b = a
```

b 변수에 a 변수를 대입하면 어떻게 될까? b와 a는 같은 걸까, 다른 걸까? 결론부터 말하면 b는 a와 완전히 동일하다고 할 수 있다. 다만 [1, 2, 3]이라는 리스트 객체를 참조하는 변수가 a 변수 1개에서 b 변수가 추가되어 2개로 늘어났다는 차이만 있을 뿐이다.

id 함수를 사용하면 이러한 사실을 확인할 수 있다.

```python
>>> id(a)
4479380800
>>> id(b)
4479380800
```

id(a)의 값이 id(b)의 값과 동일하다는 것을 확인할 수 있다. 즉, a가 가리키는 대상과 b가 가리키는 대상이 동일하다는 것을 알 수 있다. 동일한 객체를 가리키고 있는지에 대해서 판단하는 파이썬 명령어 is를 다음과 같이 실행해도 역시 참을 리턴해 준다.

```python
>>> a is b
True
```

이제 다음 예를 계속 본다.

```python
>>> a[1] = 4
>>> a
[1, 4, 3]
>>> b
[1, 4, 3]
```

a 리스트의 두 번째 요소를 값 4로 바꾸었더니 a만 바뀌는 것이 아니라 b도 똑같이 바뀌었다. 그 이유는 앞에서 살펴본 것처럼 a, b 모두 동일한 리스트를 가리키고 있기 때문이다.

그렇다면 b 변수를 생성할 때 a 변수의 값을 가져오면서 a 와는 다른 주소를 가리키도록 만들 수는 없을까? 다음 2가지 방법이 있다.

### 1. [:] 이용하기

첫 번째 방법은 다음과 같이 리스트 전체를 가리키는 [:]을 사용해서 복사하는 것이다.

```python
>>> a = [1, 2, 3]
>>> b = a[:]
>>> a[1] = 4
>>> a
[1, 4, 3]
>>> b
[1, 2, 3]
```

위 예에서 볼 수 있듯이 a 리스트 값을 바꾸더라도 b 리스트에는 아무런 영향이 없다.

### 2. copy 모듈 이용하기

두 번째 방법은 copy 모듈을 사용하는 것이다. 

```python
>>> from copy import copy
>>> a = [1, 2, 3]
>>> b = copy(a)
```

위 예에서 b = copy(a)는 b = a[:]과 동일하다.
두 변수의 값은 같지만, 서로 다른 객체를 가리키고 있는지 다음과 같이 확인해 본다.

```python
>>> b is a
False
```

위 예에서 `b is a`가 False를 리턴하므로 b와 a가 가리키는 객체는 서로 다르다는 것을 알 수 있다.

#### copy 함수 사용하기

다음처럼 리스트 자료형의 자체 함수인 copy 함수를 사용해도 copy 모듈을 사용하는 것과 동일한 결과를 얻을 수 있다.
```python
>>> a = [1, 2, 3]
>>> b = a.copy()
>>> b is a
False
```


## 변수를 만드는 여러가지 방법

다음과 같이 튜플로 a, b에 값을 대입할 수 있다.

```python
>>> a, b = ('python', 'life')
```

이 방법은 다음 예문과 완전히 동일하다.

```python
>>> (a, b) = 'python', 'life'
```

튜플은 괄호를 생략해도 된다.

다음처럼 리스트로 변수를 만들 수도 있다.

```python
>>> [a,b] = ['python', 'life']
```

또한 여러 개의 변수에 같은 값을 대입할 수도 있다.

```python
>>> a = b = 'python'
```

파이썬에서는 위 방법을 사용하여 두 변수의 값을 매우 간단하게 바꿀 수 있다.

```python
>>> a = 3
>>> b = 5
>>> a, b = b, a
>>> a
5
>>> b
3
```

처음에 a에 값 3, b에는 값 5가 대입되어 있었지만 `a, b = b, a` 문장을 수행한 후에는 그 값이 서로 바뀌었다는 것을 확인할 수 있다.

> 출처: [https://wikidocs.net/18](https://wikidocs.net/18)