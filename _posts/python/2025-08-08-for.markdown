---
layout: post
title: "for문"
date: 2025-08-08 10:33:00 +0900
categories: 
  - Dev
  - python
tag: python
comments: true
---

* this unordered seed list will be replaced by the toc
{:toc}

파이썬의 직관적인 특징을 가장 잘 보여 주는 것이 바로 이 for 문이다. while 문과 비슷한 반복문인 for 문은 문장 구조가 한 눈에 들어온다는 장점이 있다.

# for 문의 기본 구조

for 문의 기본 구조는 다음과 같다.

```Python
for 변수 in 리스트(또는 튜플, 문자열):
	수행할_문장1
	수행할_문장2
	...
```

리스트나 튜플, 문자열의 첫 번째 요소부터 마지막 요소까지 차례로 변수에 대입되어 ‘수행할_문장1’, ‘수행할_문장2’ 등이 수행된다.

  

# 예제를 통해 for 문 이해하기

## 1. 전형적인 for 문

```Python
>>> test_list = ['one', 'two', 'three']
>>> for i in test_list:
...     print(i)
...
one
two
three
```

[’one’, ‘two’, ‘three’] 리스트의 첫 번째 요소인 ‘one’이 먼저 `i` 변수에 대입된 후 `print(i)` 문장을 수행한다. 다음에 두 번째 요소 ‘two’가 `i` 변수에 대입된 후 `print(i)` 문장을 수행하고 리스트의 마지막 요소까지 이것을 반복한다.

  

## 2. 다양한 for 문의 사용

```Python
>>> a = [(1, 2), (3, 4), (5, 6)]
>>> for (first, last) in a:
...     print(first + last)
...
3
7
11
```

위 예는 a 리스트의 요솟값이 튜플이기 때문에 각각의 요소가 자동으로 `(first, last)` 변수에 대입된다.

  

## 3. for 문의 응용

for 문의 쓰임새를 알기 위해 다음과 같은 문제를 생각해 본다.

```Python
총 5명의 학생이 시험을 보았는데 시험 점수가 60점 이상이면 합격이고 그렇지 않으면 불합격이다. 합격인지,
불합격인지 결과를 보여 주시오.
```

먼저 학생 5명의 시험 점수를 리스트로 표현해 본다.

```Python
marks = [90, 25, 67, 45, 80]
```

1번 학생은 90점이고 5번 학생은 80점이다.

이런 점수를 차례로 검사해서 합격했는지, 불합격했는지 통보해 주는 프로그램을 만들어 본다.

```Python
marks = [90, 25, 67, 45, 80] # 학생들의 시험 점수 리스트

number = 0  # 학생에게 붙여 줄 번호
for mark in marks:  # 90, 25, 67, 45, 80을 순서대로 mark에 대입
    number = number + 1
    if mark >= 60:
        print("%d번 학생은 합격입니다." % number)
    else:
        print("%d번 학생은 불합격입니다." % number)
```

각각의 학생에게 번호를 붙여 주기 위해 `number` 변수를 사용하였다. 점수 리스트 marks에서 차례로 점수를 꺼내어 `mark`라는 변수에 대입하고 for 문 안의 문장들을 수행한다. 먼저 for 문이 한 번씩 수행될 때 마다 `number`는 1씩 증가한다.

![[99.Atteachment/image 16.png|image 16.png]]

이 프로그램을 실행하면 `mark`가 60이상일 때 합격 메시지를 출력하고 60을 넘기지 않을 때 불합격 메시지를 출력한다.

```Python
1번 학생은 합격입니다.
2번 학생은 불합격입니다.
3번 학생은 합격입니다.
4번 학생은 불합격입니다.
5번 학생은 합격입니다.
```

  

# for 문과 continue 문

for 문 안의 문장을 수행하는 동중 continue 문을 만나면 for 문의 처음으로 돌아가게 된다.

앞에서 for 문 응용 예제를 그대로 사용해서 60점 이상인 사람에게는 축하 메시지를 보내고 나머지 사람에게는 아무런 메시지도 전하지 않는 프로그램을 작성해 본다.

```Python
marks = [90, 25, 67, 45, 80]

number = 0
for mark in marks:
    number = number + 1
    if mark < 60:
        continue
    print('%d번 학생 축하합니다. 합격입니다.' % number)
```

점수가 60점 이하인 학생인 경우에는 `mark < 60` 이 참이 되어 continue 문이 수행된다. 따라서 축하 메시지를 출력하는 부분인 print 문을 수행하지 않고 for 문의 처음으로 돌아가게 된다.

```Python
1번 학생 축하합니다. 합격입니다.
3번 학생 축하합니다. 합격입니다.
5번 학생 축하합니다. 합격입니다.
```

  

# for 문과 함께 자주 사용하는 range 함수

for 문은 숫자 리스트를 자동으로 만들어 주는 range 함수와 함께 사용하는 경우가 많다. 다음은 range 함수의 간단한 사용법이다.

```Python
>>> a = range(10)
>>> a
range(0, 10)
```

`range(10`은 0부터 10 미만의 숫자를 포함하는 `range` 객체를 만들어 준다.

시작 숫자와 끝 숫자를 지정하려면 `range(시작_숫자, 끝_숫자)` 형태를 사용하는데, 이때 끝 숫자는 포함되지 않는다.

```Python
>>> a = range(1, 11)
>>> a
range(1, 11)
```

  

## range 함수의 예시 살펴보기

for 문과 range 함수를 사용하면 1부터 10까지 더하는 것을 다음과 같이 쉽게 구현할 수 있다.

```Python
>>> add = 0
>>> for i in range(1, 11):
...     add = add + i
...
>>> print(add)
55
```

`range(1, 11)`은 숫자 1부터 10까지(1이상 11미만)의 숫자를 데이터로 가지는 객체이다. 따라서 위 예에서 `i` 변수에 숫자가 1부터 10까지 하나씩 차례로 대입되면서 `add = add + i` 문장을 반복적으로 수행하고 `add` 는 최종적으로 55가 된다.

또한 우리가 앞에서 살펴본 합격 축하 문장을 출력하는 예제도 range 함수를 사용해서 다음과 같이 바꿀 수 있다.

```Python
marks = [90, 25, 67, 45, 80]

for number in range(len(marks)):
    if marks[number] < 60:
        continue
    print('%d번 학생 축하합니다. 합격입니다.' % number)
```

`len`은 리스트 안의 요소 개수를 리턴하는 함수이다. 따라서 `len(marks)`는 5, `range(len(marks))`는 `range(5)`가 될 것이다. `number` 변수에는 차례로 0부터 4까지의 숫자가 대입되고 `marks[number]`는 차례대로 90, 25, 67, 45, 80 값을 가지게 된다.

  

## for와 range를 이용한 구구단

for와 range 함수를 사용하면 소수 코드 단 4줄만으로 구구단을 출력할 수 있다.

```Python
>>> for i in range(2, 10):         # 1번 for문
...     for j in range(1, 10):     # 2번 for문
...         print(i * j, end = ' ')
...     print('')
...
2 4 6 8 10 12 14 16 18
3 6 9 12 15 18 21 24 27
4 8 12 16 20 24 28 32 36
5 10 15 20 25 30 35 40 45
6 12 18 24 30 36 42 48 54
7 14 21 28 35 42 49 56 63
8 16 24 32 40 48 56 64 72
9 18 27 36 45 54 63 72 81
```

위 예를 보면 for 문을 두 번 사용했다. 1번 for 문에서 2부터 9까지의 숫자(`range(2, 10)`)가 차례대로 `i`에 대입된다. `i`가 처음 2일때 2번 for 문을 만나게 된다. 2번 for 문에서 1부터 9까지의 숫자(`range(1, 10)`)가 `j`에 대입되고 그 다음 문장인 `print(i * j, end=' ')`를 수행한다. 따라서 `i`가 2일때 `2 * 1, 2 * 2, 2 * 3, ... 2 * 9`까지 차례대로 수행되며 그 값을 출력하게 된다. 그 다음으로 `i`가 3일때 역시 2일때와 마찬가지로 수행될 것이고 `i`가 9일 때까지 계속 반복된다.

![[99.Atteachment/image 1 8.png|image 1 8.png]]

`print(i * j, end=' ')`와 같이 print 함수에 end 파라미터를 설정한 이유는 해당 결괏값을 출력할 때 다음 줄로 넘기지 않고 그 줄에 계속 출력하기 위해서이다. 그 다음에 이어지는 `print(' ')`는 2단, 3단 등을 구분하기 위해 사용했다. 두 번째 for 문이 끝나면 결괏값을 다음 줄부터 출력하게 하는 역할을 한다.

> print 문의 end 매개변수에는 줄바꿈 문자(`\n`)가 기본값으로 설정되어 있다.

  

# 리스트 컴프리헨션 사용하기

리스트 안에 for 문을 포함하는 리스트 컴프리헨션(list comprehension)을 사용하면 좀 더 편리하고 직관적인 프로그램을 만들 수 있다.

```Python
>>> a = [1, 2, 3, 4]
>>> result = []
>>> for num in a:
...     result.append(num * 3)
...
>>> print(result)
[3, 6, 9, 12]
```

위 예제에서는 a 리스트의 각 항목에 3을 곱한 결과를 result 리스트에 담았다.

리스트 컴프리헨션을 사용하면 다음과 같이 더 간단하게 작성할 수 있다.

```Python
>>> a = [1, 2, 3, 4]
>>> result = [num * 3 for num in a]
>>> print(result)
[3, 6, 9, 12]
```

만약 [1, 2, 3, 4] 중에서 짝수에만 3을 곱하여 담고 싶다면 리스트 컴프리헨션 안에 ‘if 조건문’을 사용하면 된다.

```Python
>>> a = [1, 2, 3, 4]
>>> result = [num * 3 for num in a if num % 2 == 0]
>>> print(result)
[6, 12]
```

리스트 컴프리헨션의 문법은 다음과 같다.

```Python
[표현식 for 항목 in 반복_가능_객체 if 조건문]
```

조금 복잡하지만, for 문을 2개 이상 사용하는 것도 가능하다. for 문을 여러 개 사용할 때의 문법은 다음과 같다.

```Python
[표현식 for 항목1 in 반복_가능_객체1 if 조건문1
      for 항목2 in 반복_가능_객체2 if 조건문2
      ...
      for 항목n in 반복_가능_객체n if 조건문n]
```

만약 구구단의 모든 결과를 리스트에 담고 싶다면 리스트 컴프리헨션을 사용하여 다음과 같이 간단하게 구현할 수도 있다.

```Python
>>> result = [x * y for x in range(2, 10)
...                 for y in range(1, 10)]
>>> print(result)
[2, 4, 6, 8, 10, 12, 14, 16, 18, 3, 6, 9, 12, 15, 18, 21, 24, 27, 4, 8, 12, 16, 20, 24, 28, 32, 36, 5, 10, 15, 20, 25, 30, 35, 40, 45, 6, 12, 18, 24, 30, 36, 42, 48, 54, 7, 14, 21, 28, 35, 42, 49, 56, 63, 8, 16, 24, 32, 40, 48, 56, 64, 72, 9, 18, 27, 36, 45, 54, 63, 72, 81]
```