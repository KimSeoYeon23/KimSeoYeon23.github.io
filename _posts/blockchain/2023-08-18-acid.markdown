---
layout: post
title:  "ACID"
date:   2023-08-18 12:40:00 +0900
categories: 
  - Dev
  - blockchain
tag: blockchain
comments: true
---

* this unordered seed list will be replaced by the toc
{:toc}

## ACID

### 트랜잭션

![트랜잭션](../../assets/img/blockchain/transaction_2.png){:.centered}

*트랜잭션*

트랜잭션이란 여러 개의 작업을 하나로 묶은 실행 유닛이다. 각 트랜잭션은 하나의 특정 작업으로 시작을 해 묶여 있는 모든 작업을 다 완료해야 정상적으로 종료한다. 만약 하나의 트랜잭션에 속해있는 여러 작업 중에서 단 하나의 작업이라도 실패하면, 이 트랜잭션에 속한 모든 작업을 실패한 것으로 판단한다. 다시 말해 작업이 하나라도 실패를 하게 되면 트랜잭션도 실패이고, 모든 작업이 성공적이면 트랜잭션 또한 성공이다. **성공** 또는 **실패**라는 두 개의 결과만 존재하는 트랜잭션은, 미완료된 작업 없이 모든 작업을 성공해야 한다.  

데이터베이스 트랜잭션은 ACID라는 특성이 있다.  

### ACID

ACID는 데이터베이스 내에서 일어나는 하나의 트랜잭션(transaction)의 안전성을 보장하기 위해 필요한 성질이다.

- Atomicity
- Consistency
- Isolation
- Durability

### Atomicity(원자성)

![Atomicity](../../assets/img/blockchain/atomicity.png){:.centered}

*Atomicity*

원자성은 하나의 트랜잭션에 속해있는 모든 작업이 **전부 성공하거나 전부 실패해서** 결과를 예측할 수 있어야 한다. 하나의 단위로 묶여있는 여러 작업이 부분적으로 실행된다면, 업데이트가 일어났지만 누가 업데이트했는지 모르거나, 업데이트 날짜가 누락되는 등 데이터가 오염될 수 있다. 예를 들어 계좌이체를 할 때는 다음과 같은 두 단계가 있다.

1. A 계좌에서 출금한다.
2. B 계좌에 입금한다.

계좌이체를 하려는데 A 계좌에서는 출금이 이뤄지고, B 계좌에 입금되지 않았다고 가정하겠다. 어디서 문제가 발생했는지 파악할 수 없다면, A 계좌에서 출금된 돈은 세상에서 사라지는 돈이 된다. 만약 은행에서 이런 일이 발생한다면, 은행은 더 이상 제 기능을 할 수 없을 것이다. A 계좌에서 출금하는 일은 성공했지만, B 계좌에 입금하는 작업에 실패한다면 계좌 A에서 출금하는 작업을 포함하여 모든 작업이 실패로 돌아가야 한다는 것이 Atomicity(원자성)이다.  

원자성을 지켰다면 1번과 2번, 두 작업이 모두 성공적으로 완료되어야 한다. 그렇지 않으면(둘 중 하나의 작업이라도 실패한다면), 하나의 단위로 묶여 있는 모든 작업이 실패하게 만들어 기존 데이터를 보호한다.  

SQL에서도 마찬가지이다. 특정 쿼리를 실행했는데 부분적으로 실패하는 부분이 있다면, 전부 실패하도록 구현되어 있다. 때때로 충돌 요인에 대해서 선택지를 제공한다.

### Consistency(일관)

![Consistency](../../assets/img/blockchain/consistency.png){:.centered}

*Consistency*

두 번째는 데이터베이스의 상태가 일관되어야 한다는 성질이다. 하나의 트랜잭션 이전과 이후, **데이터베이스의 상태는 이전과 같이 유효해야 한다.** 다시 말해, 트랜잭션이 일어난 이후의 데이터베이스는 데이터베이스의 제약이나 규칙을 만족해야 한다는 뜻이다.  

예를 들어 '모든 고객은 반드시 이름을 가지고 있어야 한다'는 데이터베이스의 제약이 있다고 가정하겠다.  

다음과 같은 트랜잭션은 Consistency(일관성)를 위반한다:

- 이름 없는 새로운 고객을 추가하는 쿼리
- 기존 조객의 이름을 삭제하는 쿼리
  
데이터베이스의 유효한 상태는 다를 수 있지만, 데이터의 상태에 대한 일관성은 변하지 않아야 한다. 이 예시는 '이름이 있어야 한다'라는 제약을 위반한다. 따라서 예시 트랜잭션이 일어난 이후의 데이터베이스는 일관되지 않는 상태를 가지게 된다.

### Isolation(격리성, 고립성)

![Isolation](../../assets/img/blockchain/isolation.png){:.centered}

*Isolation*

Isolation(격리성)은 **모든 트랜잭션은 다른 트랜잭션으로부터 독립되어야 한다**는 뜻이다.  
실제로 동시에 여러 개의 트랜잭션이 수행될 때, 각 트랜잭션은 고립(격리)되어 있어 연속으로 실행된 것과 동일한 결과를 나타낸다.  

예를 들어 계좌에 만 원이 있다고 가정하겠다.  

- 이 계좌로부터 계좌 B로 6천 원을, 계좌 C로 6천 원을 동시에 계좌 이체 하는 경우, 계좌 B에 먼저 송금한 뒤 계좌 C에 보내는 결과가 동일해야 한다.
  
동시에 트랜잭션을 실행한다고 해서 계좌 B와 C에 각각 6천 원씩 송금하여 마이너스 통장이 되는 것이 아니다. 각각의 송금 작업을 연속으로 실행하는 것과 동일한 결과가 나타나야 한다. 격리성을 지키는 각 트랜잭션은 철저히 독립적이기 때문에, 다른 트랜잭션의 작업 내용을 알 수 없다. 그리고 트랜잭션이 동시에 실행될 때와 연속으로 실행될 때의 데이터베이스 상태가 동일해야 한다.

### Durability(지속)

![Durability](../../assets/img/blockchain/durability.png){:.centered}

*Durability*

Durability(격리성)은 하나의 트랜잭션이 성공적으로 수행되었다면, 해당 트랜잭션에 대한 로그가 남아야 한다. 만약 런타임 오류나 시스템 오류나 시스템 오류가 발생하더라도, **해당 기록은 영구적이어야** 한다는 뜻이다.  

예를 들어 은행에서 계좌이체를 성공적으로 실행한 뒤에, 해당 은행 데이터베이스에 오류가 발생해 종료되더라도 계좌이체 내역은 기록으로 남아야 한다.  

마찬가지로 계좌이체를 로그로 기록하기 전에 시스템 오류 등에 의해 종료가 된다면, 해당 이체 내역은 실패로 돌아가고 각 계좌는 계좌이체 이전 상태들로 돌아가게 된다.
